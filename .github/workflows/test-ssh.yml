name: Deploy Django to GCP COS VM

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: django-app
      IMAGE_TAG: ${{ github.sha }}
      FULL_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/django-demo/django-app:${{ github.sha }}

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Start SSH agent and load private key
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_VM_SSH_KEY }}

      # 3️⃣ Validate required secrets
      - name: Validate secrets
        run: |
          set -euo pipefail
          for name in GCP_PROJECT_ID GCP_REGION GCP_SA_KEY VM_HOST VM_USER; do
            val="${{ secrets[name] }}"
            if [ -z "$val" ]; then
              echo "Missing $name"
              exit 1
            fi
          done
          echo "All required secrets present."

      # 4️⃣ Debug Artifact Registry login info
      - name: Debug Artifact Registry
        run: |
          echo "REGION=${{ secrets.GCP_REGION }}"
          echo "REGISTRY=${{ secrets.GCP_REGION }}-docker.pkg.dev"
          echo "FULL_IMAGE=${{ env.FULL_IMAGE }}"
          echo "Checking docker version..."
          docker --version

      # 5️⃣ Docker login to Artifact Registry
      - name: Docker login
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | docker login -u _json_key --password-stdin "${{ secrets.GCP_REGION }}-docker.pkg.dev"

      # 6️⃣ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t "${{ env.FULL_IMAGE }}" .

      # 7️⃣ Push Docker image
      - name: Push Docker image
        run: |
          docker push "${{ env.FULL_IMAGE }}"

      # 8️⃣ Upload SA key to VM
      - name: Upload SA key to VM
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > ar_key.json
          scp -o StrictHostKeyChecking=no ar_key.json ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/tmp/ar_key.json
          rm -f ar_key.json

      # 9️⃣ Remote deploy on COS VM
      - name: Remote deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          set -euxo pipefail
          REGION="${{ secrets.GCP_REGION }}"
          REGISTRY="${REGION}-docker.pkg.dev"
          FULL_IMAGE="${{ env.FULL_IMAGE }}"

          sudo docker logout "$REGISTRY" || true
          sudo docker login -u _json_key --password-stdin "$REGISTRY" < /tmp/ar_key.json

          sudo docker pull "$FULL_IMAGE"
          sudo docker stop django-app || true
          sudo docker rm django-app || true
          sudo docker run -d --name django-app -p 8080:8080 --restart=always "$FULL_IMAGE"

          rm -f /tmp/ar_key.json
          EOF
