name: Deploy Django to GCP COS VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: django-app
  REGION: ${{ secrets.GCP_REGION }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: django-demo
  IMAGE_TAG: ${{ github.sha }}
  FULL_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/django-demo/django-app:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 0) 驗證 Secrets 是否存在
      - name: Validate required secrets
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          for name in GCP_PROJECT_ID GCP_REGION GCP_SA_KEY VM_HOST VM_USER SSH_PRIVATE_KEY; do
            val="${!name:-}"
            if [ -z "$val" ]; then
              echo "Missing $name"
              exit 1
            fi
          done
          echo "All required secrets present."

      - name: Checkout code
        uses: actions/checkout@v4

      # 正確的身分驗證流程：先 auth 再安裝 gcloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Runner 端先登入 Artifact Registry（用 _json_key）
      - name: Docker login to Artifact Registry (runner)
        run: |
          set -euo pipefail
          REGION_RAW='${{ secrets.GCP_REGION }}'
          REGION="$(printf "%s" "$REGION_RAW" | tr -d '\r\n' | xargs)"
          REGISTRY="${REGION}-docker.pkg.dev"
          printf "%s" '${{ secrets.GCP_SA_KEY }}' > sa.json
          docker logout "$REGISTRY" || true
          docker login -u _json_key --password-stdin "$REGISTRY" < sa.json
          echo "Logged in to $REGISTRY"

      - name: Build Docker image
        run: |
          set -euo pipefail
          IMG='${{ env.FULL_IMAGE }}'
          IMG="$(printf "%s" "$IMG" | tr -d '\r\n' | xargs)"
          echo "Building image: $IMG"
          docker build -t "$IMG" .

      - name: Push image to Artifact Registry
        run: |
          set -euo pipefail
          IMG='${{ env.FULL_IMAGE }}'
          IMG="$(printf "%s" "$IMG" | tr -d '\r\n' | xargs)"
          echo "Pushing image: $IMG"
          docker push "$IMG"

      # ⬇️ 徹底修正：建立 ~/.ssh 與 known_hosts + 寫入私鑰 + 加入 host key
      - name: Prepare SSH (dir, key, known_hosts)
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          touch "$HOME/.ssh/known_hosts"
          chmod 644 "$HOME/.ssh/known_hosts"
          umask 077
          printf "%s" '${{ secrets.SSH_PRIVATE_KEY }}' > "$HOME/.ssh/id_vm"
          chmod 600 "$HOME/.ssh/id_vm"
          # 預先抓取 host key；即使抓不到，稍後也用 StrictHostKeyChecking=accept-new 防呆
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> "$HOME/.ssh/known_hosts" || true

      - name: Validate SSH key format
        run: |
          ssh-keygen -yf -f "$HOME/.ssh/id_vm" >/dev/null 2>&1 \
            || { echo "Invalid or encrypted SSH_PRIVATE_KEY"; exit 1; }

      # 將 SA 金鑰傳到 VM（指定 -i 並關閉嚴格檢查，以免第一次連線卡住）
      - name: Upload SA key to VM
        run: |
          printf "%s" '${{ secrets.GCP_SA_KEY }}' > ar_key.json
          scp -i "$HOME/.ssh/id_vm" -o StrictHostKeyChecking=accept-new -q \
            ar_key.json ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/tmp/ar_key.json
          rm -f ar_key.json

      # 在 VM：docker login / pull / run（同樣帶 -i 與 accept-new）
      - name: Remote deploy on VM
        run: |
          ssh -i "$HOME/.ssh/id_vm" -o StrictHostKeyChecking=accept-new \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          set -euxo pipefail

          REGION_RAW='${{ secrets.GCP_REGION }}'
          REGION="$(printf "%s" "$REGION_RAW" | tr -d '\r\n' | xargs)"
          REGISTRY="${REGION}-docker.pkg.dev"

          sudo docker logout "$REGISTRY" || true
          sudo docker login -u _json_key --password-stdin "$REGISTRY" < /tmp/ar_key.json

          FULL_IMAGE_RAW='${{ env.FULL_IMAGE }}'
          FULL_IMAGE="$(printf "%s" "$FULL_IMAGE_RAW" | tr -d '\r\n' | xargs)"

          sudo docker pull "$FULL_IMAGE"
          sudo docker stop django-app || true
          sudo docker rm django-app || true
          sudo docker run -d --name django-app \
            -p 8080:8080 \
            --restart=always \
            "$FULL_IMAGE"

          rm -f /tmp/ar_key.json
          EOF
