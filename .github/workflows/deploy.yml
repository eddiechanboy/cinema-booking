name: Deploy Django to GCP COS VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: django-app
  REGION: ${{ secrets.GCP_REGION }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: app-repo
  AR_HOST: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  IMAGE_TAG: ${{ github.sha }}
  FULL_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/app-repo/django-app:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check required secrets
        run: |
          for secret in GCP_PROJECT_ID GCP_REGION GCP_SA_KEY VM_HOST VM_USER SSH_PRIVATE_KEY; do
            if [ -z "${{ secrets[$secret] }}" ]; then
              echo "❌ Missing secret: $secret"
              exit 1
            fi
          done

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.AR_HOST }}

      - name: Build Docker image
        run: docker build -t "${{ env.FULL_IMAGE }}" .

      - name: Push image to Artifact Registry
        run: docker push "${{ env.FULL_IMAGE }}"

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Upload SA key to VM
        run: |
          printf "%s" '${{ secrets.GCP_SA_KEY }}' > ar_key.json
          scp -q ar_key.json ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/tmp/ar_key.json
          rm -f ar_key.json

      - name: Remote deploy on VM
        env:
          REGION: ${{ secrets.GCP_REGION }}
          FULL_IMAGE: ${{ env.FULL_IMAGE }}
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          set -euxo pipefail
          sudo docker logout ${REGION}-docker.pkg.dev || true
          sudo docker login -u _json_key --password-stdin ${REGION}-docker.pkg.dev < /tmp/ar_key.json
          sudo docker pull ${FULL_IMAGE}
          sudo docker stop django-app || true
          sudo docker rm django-app || true
          sudo docker run -d --name django-app \
            -p 8080:8080 \
            --restart=always \
            ${FULL_IMAGE}
          rm -f /tmp/ar_key.json
          EOF
