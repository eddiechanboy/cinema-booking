name: Deploy Django to GCP COS VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# (可選) 同一時間只跑一次，新的會取消舊的
concurrency:
  group: deploy-to-vm
  cancel-in-progress: true

# (可選) 權限最小化
permissions:
  contents: read

env:
  IMAGE_NAME: django-app
  REGION: ${{ secrets.GCP_REGION }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO: django-demo
  IMAGE_TAG: ${{ github.sha }}
  FULL_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/django-demo/django-app:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 0) 驗證 Secrets 是否存在
      - name: Validate required secrets
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          SSH_PRIVATE_KEY_B64: ${{ secrets.SSH_PRIVATE_KEY_B64 }}
        run: |
          set -euo pipefail
          for name in GCP_PROJECT_ID GCP_REGION GCP_SA_KEY VM_HOST VM_USER SSH_PRIVATE_KEY_B64; do
            val="${!name:-}"
            if [ -z "$val" ]; then
              echo "Missing $name"
              exit 1
            fi
          done
          echo "All required secrets present."

      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ 不用 gcloud：直接用 _json_key 對 Artifact Registry 登入
      - name: Docker login to Artifact Registry (runner)
        run: |
          set -euo pipefail
          REGION_RAW='${{ secrets.GCP_REGION }}'
          REGION="$(printf "%s" "$REGION_RAW" | tr -d '\r\n' | xargs)"
          REGISTRY="${REGION}-docker.pkg.dev"
          printf "%s" '${{ secrets.GCP_SA_KEY }}' > sa.json
          docker logout "$REGISTRY" || true
          docker login -u _json_key --password-stdin "$REGISTRY" < sa.json
          echo "Logged in to $REGISTRY"

      - name: Build Docker image
        run: |
          IMG="${{ env.FULL_IMAGE }}"
          IMG="$(printf "%s" "$IMG" | tr -d '\r\n' | xargs)"
          echo "Building image: $IMG"
          docker build -t "$IMG" .

      - name: Push image to Artifact Registry
        run: |
          IMG="${{ env.FULL_IMAGE }}"
          IMG="$(printf "%s" "$IMG" | tr -d '\r\n' | xargs)"
          echo "Pushing image: $IMG"
          docker push "$IMG"

      # ✅ Decode Base64 SSH key, 不會有多行錯誤
      - name: Prepare SSH key
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          touch "$HOME/.ssh/known_hosts"
          chmod 644 "$HOME/.ssh/known_hosts"

          # 用 printf 還原 Base64（避免 echo 多加換行）
          if [ -z "${SSH_PRIVATE_KEY_B64:-}" ]; then
            echo "[fatal] Secret SSH_PRIVATE_KEY_B64 is empty or missing"
            exit 1
          fi
          printf %s "$SSH_PRIVATE_KEY_B64" | base64 -d > "$HOME/.ssh/id_vm" || { echo "[fatal] base64 decode failed"; exit 1; }

          # 去除 CRLF，設正確權限
          tr -d '\r' < "$HOME/.ssh/id_vm" > "$HOME/.ssh/id_vm.tmp" && mv "$HOME/.ssh/id_vm.tmp" "$HOME/.ssh/id_vm"
          chmod 600 "$HOME/.ssh/id_vm"

          # 加入 host key（失敗不擋）
          ssh-keyscan -H "$VM_HOST" >> "$HOME/.ssh/known_hosts" || true

          # 偵錯（不洩漏內容）
          echo "== id_vm header =="; head -n 1 "$HOME/.ssh/id_vm" || true
          echo "== id_vm footer =="; tail -n 1 "$HOME/.ssh/id_vm" || true
          echo "== has BEGIN/END =="; (grep -q "BEGIN OPENSSH" "$HOME/.ssh/id_vm" && grep -q "END OPENSSH" "$HOME/.ssh/id_vm" && echo yes) || echo no

      - name: Validate SSH key format
        run: |
          set -e
          if ssh-keygen -yf -f "$HOME/.ssh/id_vm" >/tmp/derived_pub 2>/dev/null; then
            echo "Public key prefix (expect ssh-ed25519 or ssh-rsa):"
            head -c 20 /tmp/derived_pub; echo
          else
            echo "Invalid or encrypted SSH_PRIVATE_KEY_B64"
            exit 1
          fi

      # 上傳 SA 金鑰至 VM（供 docker login 使用）
      - name: Upload SA key to VM
        run: |
          printf "%s" '${{ secrets.GCP_SA_KEY }}' > ar_key.json
          scp -i "$HOME/.ssh/id_vm" -o StrictHostKeyChecking=accept-new -q \
            ar_key.json ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/tmp/ar_key.json
          rm -f ar_key.json

      # 在 VM 上登入 / 拉取 / 重啟容器
      - name: Remote deploy on VM
        run: |
          ssh -i "$HOME/.ssh/id_vm" -o StrictHostKeyChecking=accept-new \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          set -euxo pipefail
          REGION_RAW='${{ secrets.GCP_REGION }}'
          REGION="$(printf "%s" "$REGION_RAW" | tr -d '\r\n' | xargs)"
          REGISTRY="${REGION}-docker.pkg.dev"

          sudo docker logout "$REGISTRY" || true
          sudo docker login -u _json_key --password-stdin "$REGISTRY" < /tmp/ar_key.json

          FULL_IMAGE_RAW='${{ env.FULL_IMAGE }}'
          FULL_IMAGE="$(printf "%s" "$FULL_IMAGE_RAW" | tr -d '\r\n' | xargs)"

          sudo docker pull "$FULL_IMAGE"
          sudo docker stop django-app || true
          sudo docker rm django-app || true
          sudo docker run -d --name django-app \
            -p 8080:8080 \
            --restart=always \
            "$FULL_IMAGE"

          rm -f /tmp/ar_key.json
          EOF
